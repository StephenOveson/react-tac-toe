{"version":3,"sources":["components/Header/logo.svg","components/Header/Header.jsx","components/TicTacToe/Board.jsx","App.js","index.js"],"names":["module","exports","Header","className","href","src","logo","width","height","alt","TicTacToe","useState","Array","from","keys","board","setBoard","gameEnded","setGameEnded","wins","setWins","loss","setLoss","tie","setTie","person","setPerson","computer","setComputer","gameStart","setGameStart","human","ai","winCombos","cells","document","getElementsByClassName","turn","square","player","getElementById","innerText","gameWon","checkWin","gameOver","plays","reduce","a","e","i","concat","entries","index","every","elem","indexOf","style","backgroundColor","declareWinner","who","querySelector","display","emptySquares","filter","bestSpot","miniMax","checkTie","length","newBoard","availableSpots","score","bestMove","moves","move","result","push","bestScore","id","type","onClick","target","removeProperty","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.79d976eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f0793d9f.svg\";","import React from 'react'\nimport logo from './logo.svg'\n\nconst Header = () => \n    <nav className=\"navbar navbar-light bg-light mb-5\">\n        <a className=\"navbar-brand\" href=\"/\">\n            <img src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top pr-1\" alt=\"\" />\n            React-Tac-Toe\n        </a>\n    </nav>\n\n\nexport default Header;","import React, { useState } from 'react'\nimport './Board.css'\n\nconst TicTacToe = () => {\n    const [board, setBoard] = useState(Array.from(Array(9).keys()))\n    const [gameEnded, setGameEnded] = useState(false)\n    const [wins, setWins] = useState(0)\n    const [loss, setLoss] = useState(0)\n    const [tie, setTie] = useState(0)\n    const [person, setPerson] = useState('X')\n    const [computer, setComputer] = useState('O')\n    const [gameStart, setGameStart] = useState(true)\n\n    const human = person\n    const ai = computer\n    const winCombos = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [6, 4, 2]\n    ]\n    const cells = document.getElementsByClassName('square')\n\n    const turnClick = (square) => {\n        if (gameStart) {\n            setGameStart(false)\n        }\n        if (gameEnded) return\n        if (typeof board[square.target.id] == 'number') {\n            turn(square.target.id, human)\n            if (!checkTie()) {\n                turn(bestSpot(), ai)\n            }\n        }\n    }\n\n    const turn = (square, player) => {\n        board[square] = player;\n        document.getElementById(square).innerText = player;\n        let gameWon = checkWin(board, player)\n        if (gameWon) gameOver(gameWon)\n    }\n\n    const checkWin = (board, player) => {\n        let plays = board.reduce((a, e, i) =>\n            (e === player) ? a.concat(i) : a, [])\n        let gameWon = null;\n        for (let [index, win] of winCombos.entries()) {\n            if (win.every(elem => plays.indexOf(elem) > -1)) {\n                gameWon = { index: index, player: player }\n            }\n        }\n\n        return gameWon;\n    }\n\n    const gameOver = (gameWon) => {\n        for (let index of winCombos[gameWon.index]) {\n            document.getElementById(index).style.backgroundColor =\n                gameWon.player === human ? \"blue\" : \"red\";\n            gameWon.player === human ? setWins(wins + 1) : setLoss(loss + 1);\n        }\n        setGameEnded(true)\n        declareWinner(gameWon.player === human ? \"You Win\" : \"You Lose\")\n    }\n\n    const declareWinner = (who) => {\n        document.querySelector('.endgame .text').style.display = 'block';\n        document.querySelector('.endgame .text').innerText = who;\n    }\n\n    const emptySquares = () => {\n        return board.filter(square => typeof square == 'number')\n    }\n\n    const bestSpot = () => {\n        return miniMax(board, ai).index;\n    }\n\n    const checkTie = () => {\n        if (emptySquares().length === 0) {\n            for (let i = 0; i < cells.length; i++) {\n                cells[i].style.backgroundColor = 'green';\n            }\n            setGameEnded(true)\n            setTie(tie + 1)\n            declareWinner('Tie Game!')\n            return true;\n        }\n        return false;\n    }\n\n    const miniMax = (newBoard, player) => {\n        let availableSpots = emptySquares(newBoard)\n\n        if (checkWin(newBoard, human)) {\n            return { score: -10 };\n        } else if (checkWin(newBoard, ai)) {\n            return { score: 20 };\n        } else if (availableSpots.length === 0) {\n            return { score: 0 };\n        }\n        let moves = [];\n        for (let i = 0; i < availableSpots.length; i++) {\n            let move = {};\n            move.index = newBoard[availableSpots[i]];\n            newBoard[availableSpots[i]] = player;\n\n            if (player === ai) {\n                let result = miniMax(newBoard, human)\n                move.score = result.score;\n            } else {\n                let result = miniMax(newBoard, ai)\n                move.score = result.score;\n            }\n\n            newBoard[availableSpots[i]] = move.index;\n\n            moves.push(move);\n        }\n\n        let bestMove;\n        if (player === ai) {\n            let bestScore = -10000;\n            for (let i = 0; i < moves.length; i++) {\n                if (moves[i].score > bestScore) {\n                    bestScore = moves[i].score;\n                    bestMove = i\n                }\n            }\n        } else {\n            let bestScore = 10000;\n            for (let i = 0; i < moves.length; i++) {\n                if (moves[i].score < bestScore) {\n                    bestScore = moves[i].score;\n                    bestMove = i\n                }\n            }\n        }\n\n        return moves[bestMove];\n    }\n\n    const replay = () => {\n        setBoard(Array.from(Array(9).keys()))\n        setGameEnded(false)\n        setGameStart(true)\n        for (let i = 0; i < cells.length; i++) {\n            cells[i].innerText = '';\n            cells[i].style.removeProperty('background-color');\n        }\n        document.querySelector('.endgame .text').style.display = 'none';\n        document.querySelector('.endgame .text').innerText = '';\n    }\n\n    const pickX = () => {\n        if (gameStart) {\n            setPerson('X')\n            setComputer('O')\n        }\n    }\n    const pickO = () => {\n        if (gameStart) {\n            setPerson('O')\n            setComputer('X')\n        }\n    }\n\n    return (\n        <div id=\"game\">\n            <h3 className=\"score\">Wins: {wins} Ties: {tie} Losses: {loss}</h3>\n            <div>\n                <button type=\"button\" className=\"theButton\" onClick={pickX}>Choose X</button>\n                <button type=\"button\" className=\"theButton\" onClick={pickO}>Choose O</button>\n            </div>\n            <div id=\"board\" onClick={(e) => turnClick(e)}>\n                <div className=\"square\" id=\"0\"></div>\n                <div className=\"square\" id=\"1\"></div>\n                <div className=\"square\" id=\"2\"></div>\n                <div className=\"square\" id=\"3\"></div>\n                <div className=\"square\" id=\"4\"></div>\n                <div className=\"square\" id=\"5\"></div>\n                <div className=\"square\" id=\"6\"></div>\n                <div className=\"square\" id=\"7\"></div>\n                <div className=\"square\" id=\"8\"></div>\n            </div>\n            <div className=\"endgame\">\n                <div className=\"text\"></div>\n                <button onClick={replay} className=\"theButton\">Replay</button>\n            </div>\n        </div>\n    )\n}\n\nexport default TicTacToe;","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header'\nimport TicTacToe from './components/TicTacToe/Board'\n\nfunction App() {\n  return (\n    <>\n      <Header></Header>\n      <TicTacToe />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}